/*
    example is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    example is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with example.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_neg_binomial_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_neg_binomial");
    reader.add_event(75, 73, "end", "model_neg_binomial");
    return reader;
}

#include <meta_header.hpp>
 class model_neg_binomial : public prob_grad {
private:
        int N;
        int n_strata;
        int n_covariates;
        std::vector<int> y;
        vector_d n;
        std::vector<int> stratum;
        matrix_d x;
        int N_f;
        int n_strata_f;
        int n_covariates_f;
        std::vector<int> y_f;
        vector_d in_sample;
        vector_d n_f;
        std::vector<int> stratum_f;
        matrix_d x_f;
public:
    model_neg_binomial(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_neg_binomial(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_neg_binomial_namespace::model_neg_binomial";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];

            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "n_strata", "int", context__.to_vec());
            n_strata = int(0);
            vals_i__ = context__.vals_i("n_strata");
            pos__ = 0;
            n_strata = vals_i__[pos__++];

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_covariates", "int", context__.to_vec());
            n_covariates = int(0);
            vals_i__ = context__.vals_i("n_covariates");
            pos__ = 0;
            n_covariates = vals_i__[pos__++];

            current_statement_begin__ = 7;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            size_t y_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y[i_0__]", y[i_0__], 0);
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("n", "N", N);
            context__.validate_dims("data initialization", "n", "vector_d", context__.to_vec(N));
            n = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("n");
            pos__ = 0;
            size_t n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < n_j_1_max__; ++j_1__) {
                n(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "n", n, 0);

            current_statement_begin__ = 9;
            validate_non_negative_index("stratum", "N", N);
            context__.validate_dims("data initialization", "stratum", "int", context__.to_vec(N));
            stratum = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("stratum");
            pos__ = 0;
            size_t stratum_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < stratum_k_0_max__; ++k_0__) {
                stratum[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("x", "N", N);
            validate_non_negative_index("x", "n_covariates", n_covariates);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(N,n_covariates));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, n_covariates);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = n_covariates;
            size_t x_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "N_f", "int", context__.to_vec());
            N_f = int(0);
            vals_i__ = context__.vals_i("N_f");
            pos__ = 0;
            N_f = vals_i__[pos__++];

            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "n_strata_f", "int", context__.to_vec());
            n_strata_f = int(0);
            vals_i__ = context__.vals_i("n_strata_f");
            pos__ = 0;
            n_strata_f = vals_i__[pos__++];

            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "n_covariates_f", "int", context__.to_vec());
            n_covariates_f = int(0);
            vals_i__ = context__.vals_i("n_covariates_f");
            pos__ = 0;
            n_covariates_f = vals_i__[pos__++];

            current_statement_begin__ = 15;
            validate_non_negative_index("y_f", "N_f", N_f);
            context__.validate_dims("data initialization", "y_f", "int", context__.to_vec(N_f));
            y_f = std::vector<int>(N_f, int(0));
            vals_i__ = context__.vals_i("y_f");
            pos__ = 0;
            size_t y_f_k_0_max__ = N_f;
            for (size_t k_0__ = 0; k_0__ < y_f_k_0_max__; ++k_0__) {
                y_f[k_0__] = vals_i__[pos__++];
            }
            size_t y_f_i_0_max__ = N_f;
            for (size_t i_0__ = 0; i_0__ < y_f_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_f[i_0__]", y_f[i_0__], 0);
            }

            current_statement_begin__ = 16;
            validate_non_negative_index("in_sample", "N_f", N_f);
            context__.validate_dims("data initialization", "in_sample", "vector_d", context__.to_vec(N_f));
            in_sample = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_f);
            vals_r__ = context__.vals_r("in_sample");
            pos__ = 0;
            size_t in_sample_j_1_max__ = N_f;
            for (size_t j_1__ = 0; j_1__ < in_sample_j_1_max__; ++j_1__) {
                in_sample(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 17;
            validate_non_negative_index("n_f", "N_f", N_f);
            context__.validate_dims("data initialization", "n_f", "vector_d", context__.to_vec(N_f));
            n_f = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_f);
            vals_r__ = context__.vals_r("n_f");
            pos__ = 0;
            size_t n_f_j_1_max__ = N_f;
            for (size_t j_1__ = 0; j_1__ < n_f_j_1_max__; ++j_1__) {
                n_f(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 18;
            validate_non_negative_index("stratum_f", "N_f", N_f);
            context__.validate_dims("data initialization", "stratum_f", "int", context__.to_vec(N_f));
            stratum_f = std::vector<int>(N_f, int(0));
            vals_i__ = context__.vals_i("stratum_f");
            pos__ = 0;
            size_t stratum_f_k_0_max__ = N_f;
            for (size_t k_0__ = 0; k_0__ < stratum_f_k_0_max__; ++k_0__) {
                stratum_f[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 19;
            validate_non_negative_index("x_f", "N_f", N_f);
            validate_non_negative_index("x_f", "n_covariates_f", n_covariates_f);
            context__.validate_dims("data initialization", "x_f", "matrix_d", context__.to_vec(N_f,n_covariates_f));
            x_f = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_f, n_covariates_f);
            vals_r__ = context__.vals_r("x_f");
            pos__ = 0;
            size_t x_f_j_2_max__ = n_covariates_f;
            size_t x_f_j_1_max__ = N_f;
            for (size_t j_2__ = 0; j_2__ < x_f_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_f_j_1_max__; ++j_1__) {
                    x_f(j_1__, j_2__) = vals_r__[pos__++];
                }
            }


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 24;
            num_params_r__ += 1;
            current_statement_begin__ = 25;
            validate_non_negative_index("beta", "n_covariates", n_covariates);
            num_params_r__ += n_covariates;
            current_statement_begin__ = 26;
            validate_non_negative_index("beta_bn", "n_strata", n_strata);
            num_params_r__ += n_strata;
            current_statement_begin__ = 27;
            validate_non_negative_index("sigma_st", "n_strata", n_strata);
            num_params_r__ += n_strata;
            current_statement_begin__ = 28;
            validate_non_negative_index("beta_st_raw", "n_strata", n_strata);
            num_params_r__ += n_strata;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_neg_binomial() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 24;
        if (!(context__.contains_r("beta_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_0", "double", context__.to_vec());
        double beta_0(0);
        beta_0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 25;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "n_covariates", n_covariates);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(n_covariates));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(n_covariates);
        size_t beta_j_1_max__ = n_covariates;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 26;
        if (!(context__.contains_r("beta_bn")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_bn missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_bn");
        pos__ = 0U;
        validate_non_negative_index("beta_bn", "n_strata", n_strata);
        context__.validate_dims("parameter initialization", "beta_bn", "vector_d", context__.to_vec(n_strata));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_bn(n_strata);
        size_t beta_bn_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < beta_bn_j_1_max__; ++j_1__) {
            beta_bn(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, beta_bn);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_bn: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 27;
        if (!(context__.contains_r("sigma_st")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_st missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_st");
        pos__ = 0U;
        validate_non_negative_index("sigma_st", "n_strata", n_strata);
        context__.validate_dims("parameter initialization", "sigma_st", "vector_d", context__.to_vec(n_strata));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_st(n_strata);
        size_t sigma_st_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < sigma_st_j_1_max__; ++j_1__) {
            sigma_st(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_st);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_st: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 28;
        if (!(context__.contains_r("beta_st_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_st_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_st_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_st_raw", "n_strata", n_strata);
        context__.validate_dims("parameter initialization", "beta_st_raw", "vector_d", context__.to_vec(n_strata));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_st_raw(n_strata);
        size_t beta_st_raw_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < beta_st_raw_j_1_max__; ++j_1__) {
            beta_st_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_st_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_st_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 24;
            local_scalar_t__ beta_0;
            (void) beta_0;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_0 = in__.scalar_constrain(lp__);
            else
                beta_0 = in__.scalar_constrain();

            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(n_covariates, lp__);
            else
                beta = in__.vector_constrain(n_covariates);

            current_statement_begin__ = 26;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_bn;
            (void) beta_bn;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_bn = in__.vector_lb_constrain(0, n_strata, lp__);
            else
                beta_bn = in__.vector_lb_constrain(0, n_strata);

            current_statement_begin__ = 27;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_st;
            (void) sigma_st;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_st = in__.vector_lb_constrain(0, n_strata, lp__);
            else
                sigma_st = in__.vector_lb_constrain(0, n_strata);

            current_statement_begin__ = 28;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_st_raw;
            (void) beta_st_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_st_raw = in__.vector_constrain(n_strata, lp__);
            else
                beta_st_raw = in__.vector_constrain(n_strata);

            // transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("theta", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(N);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            current_statement_begin__ = 33;
            validate_non_negative_index("alpha_bn", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_bn(N);
            stan::math::initialize(alpha_bn, DUMMY_VAR__);
            stan::math::fill(alpha_bn, DUMMY_VAR__);

            current_statement_begin__ = 34;
            validate_non_negative_index("beta_st", "n_strata", n_strata);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_st(n_strata);
            stan::math::initialize(beta_st, DUMMY_VAR__);
            stan::math::fill(beta_st, DUMMY_VAR__);

            current_statement_begin__ = 35;
            validate_non_negative_index("pred", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pred(N);
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 37;
            stan::math::assign(beta_st, add(beta_0, elt_multiply(beta_st_raw, sigma_st)));
            current_statement_begin__ = 38;
            stan::math::assign(pred, multiply(x, beta));
            current_statement_begin__ = 39;
            stan::math::assign(theta, inv_logit(add(stan::model::rvalue(beta_st, stan::model::cons_list(stan::model::index_multi(stratum), stan::model::nil_index_list()), "beta_st"), pred)));
            current_statement_begin__ = 40;
            stan::math::assign(alpha_bn, elt_multiply(n, theta));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 32;
            size_t theta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "theta", theta, 0);
            check_less_or_equal(function__, "theta", theta, 1);

            current_statement_begin__ = 33;
            size_t alpha_bn_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < alpha_bn_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha_bn(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha_bn" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha_bn: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "alpha_bn", alpha_bn, 0);

            current_statement_begin__ = 34;
            size_t beta_st_j_1_max__ = n_strata;
            for (size_t j_1__ = 0; j_1__ < beta_st_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta_st(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta_st" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta_st: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 35;
            size_t pred_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 47;
            lp_accum__.add(normal_log<propto__>(beta_0, 0, 1));
            current_statement_begin__ = 48;
            lp_accum__.add(normal_log<propto__>(beta, 0, 1));
            current_statement_begin__ = 49;
            lp_accum__.add(normal_log<propto__>(beta_st_raw, 0, 1));
            current_statement_begin__ = 50;
            lp_accum__.add(normal_log<propto__>(sigma_st, 0, 1));
            current_statement_begin__ = 51;
            lp_accum__.add(normal_log<propto__>(beta_bn, 0, 1));
            current_statement_begin__ = 53;
            lp_accum__.add(neg_binomial_2_log<propto__>(y, alpha_bn, elt_multiply(stan::model::rvalue(beta_bn, stan::model::cons_list(stan::model::index_multi(stratum), stan::model::nil_index_list()), "beta_bn"), alpha_bn)));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_0");
        names__.push_back("beta");
        names__.push_back("beta_bn");
        names__.push_back("sigma_st");
        names__.push_back("beta_st_raw");
        names__.push_back("theta");
        names__.push_back("alpha_bn");
        names__.push_back("beta_st");
        names__.push_back("pred");
        names__.push_back("y_out");
        names__.push_back("theta_f");
        names__.push_back("alpha_bn_f");
        names__.push_back("pred_f");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_covariates);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_strata);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_strata);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_strata);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_strata);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_neg_binomial_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double beta_0 = in__.scalar_constrain();
        vars__.push_back(beta_0);

        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(n_covariates);
        size_t beta_j_1_max__ = n_covariates;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_bn = in__.vector_lb_constrain(0, n_strata);
        size_t beta_bn_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < beta_bn_j_1_max__; ++j_1__) {
            vars__.push_back(beta_bn(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_st = in__.vector_lb_constrain(0, n_strata);
        size_t sigma_st_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < sigma_st_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_st(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_st_raw = in__.vector_constrain(n_strata);
        size_t beta_st_raw_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < beta_st_raw_j_1_max__; ++j_1__) {
            vars__.push_back(beta_st_raw(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("theta", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(N);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            current_statement_begin__ = 33;
            validate_non_negative_index("alpha_bn", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_bn(N);
            stan::math::initialize(alpha_bn, DUMMY_VAR__);
            stan::math::fill(alpha_bn, DUMMY_VAR__);

            current_statement_begin__ = 34;
            validate_non_negative_index("beta_st", "n_strata", n_strata);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta_st(n_strata);
            stan::math::initialize(beta_st, DUMMY_VAR__);
            stan::math::fill(beta_st, DUMMY_VAR__);

            current_statement_begin__ = 35;
            validate_non_negative_index("pred", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> pred(N);
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 37;
            stan::math::assign(beta_st, add(beta_0, elt_multiply(beta_st_raw, sigma_st)));
            current_statement_begin__ = 38;
            stan::math::assign(pred, multiply(x, beta));
            current_statement_begin__ = 39;
            stan::math::assign(theta, inv_logit(add(stan::model::rvalue(beta_st, stan::model::cons_list(stan::model::index_multi(stratum), stan::model::nil_index_list()), "beta_st"), pred)));
            current_statement_begin__ = 40;
            stan::math::assign(alpha_bn, elt_multiply(n, theta));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 32;
            check_greater_or_equal(function__, "theta", theta, 0);
            check_less_or_equal(function__, "theta", theta, 1);

            current_statement_begin__ = 33;
            check_greater_or_equal(function__, "alpha_bn", alpha_bn, 0);

            // write transformed parameters
            if (include_tparams__) {
                size_t theta_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    vars__.push_back(theta(j_1__));
                }
                size_t alpha_bn_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < alpha_bn_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha_bn(j_1__));
                }
                size_t beta_st_j_1_max__ = n_strata;
                for (size_t j_1__ = 0; j_1__ < beta_st_j_1_max__; ++j_1__) {
                    vars__.push_back(beta_st(j_1__));
                }
                size_t pred_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    vars__.push_back(pred(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 58;
            int y_out;
            (void) y_out;  // dummy to suppress unused var warning
            stan::math::fill(y_out, std::numeric_limits<int>::min());

            current_statement_begin__ = 59;
            double theta_f;
            (void) theta_f;  // dummy to suppress unused var warning
            stan::math::initialize(theta_f, DUMMY_VAR__);
            stan::math::fill(theta_f, DUMMY_VAR__);

            current_statement_begin__ = 60;
            double alpha_bn_f;
            (void) alpha_bn_f;  // dummy to suppress unused var warning
            stan::math::initialize(alpha_bn_f, DUMMY_VAR__);
            stan::math::fill(alpha_bn_f, DUMMY_VAR__);

            current_statement_begin__ = 61;
            double pred_f;
            (void) pred_f;  // dummy to suppress unused var warning
            stan::math::initialize(pred_f, DUMMY_VAR__);
            stan::math::fill(pred_f, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 62;
            stan::math::assign(y_out, 0);
            current_statement_begin__ = 63;
            for (int i = 1; i <= N_f; ++i) {

                current_statement_begin__ = 64;
                if (as_bool(logical_eq(get_base1(in_sample, i, "in_sample", 1), 1))) {

                    current_statement_begin__ = 65;
                    stan::math::assign(y_out, (y_out + get_base1(y_f, i, "y_f", 1)));
                } else {

                    current_statement_begin__ = 67;
                    stan::math::assign(pred_f, dot_product(stan::model::rvalue(x_f, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x_f"), beta));
                    current_statement_begin__ = 68;
                    stan::math::assign(theta_f, inv_logit((get_base1(beta_st, get_base1(stratum_f, i, "stratum_f", 1), "beta_st", 1) + pred_f)));
                    current_statement_begin__ = 69;
                    stan::math::assign(alpha_bn_f, (get_base1(n_f, i, "n_f", 1) * theta_f));
                    current_statement_begin__ = 70;
                    stan::math::assign(y_out, (y_out + neg_binomial_2_rng(alpha_bn_f, (get_base1(beta_bn, get_base1(stratum_f, i, "stratum_f", 1), "beta_bn", 1) * alpha_bn_f), base_rng__)));
                }
            }

            // validate, write generated quantities
            current_statement_begin__ = 58;
            vars__.push_back(y_out);

            current_statement_begin__ = 59;
            check_greater_or_equal(function__, "theta_f", theta_f, 0);
            check_less_or_equal(function__, "theta_f", theta_f, 1);

            vars__.push_back(theta_f);

            current_statement_begin__ = 60;
            vars__.push_back(alpha_bn_f);

            current_statement_begin__ = 61;
            vars__.push_back(pred_f);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_neg_binomial";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_0";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = n_covariates;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_bn_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < beta_bn_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_bn" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_st_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < sigma_st_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_st" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_st_raw_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < beta_st_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_st_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t theta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t alpha_bn_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < alpha_bn_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_bn" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_st_j_1_max__ = n_strata;
            for (size_t j_1__ = 0; j_1__ < beta_st_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_st" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t pred_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "y_out";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_bn_f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pred_f";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_0";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = n_covariates;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_bn_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < beta_bn_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_bn" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_st_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < sigma_st_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_st" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_st_raw_j_1_max__ = n_strata;
        for (size_t j_1__ = 0; j_1__ < beta_st_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_st_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t theta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t alpha_bn_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < alpha_bn_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_bn" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_st_j_1_max__ = n_strata;
            for (size_t j_1__ = 0; j_1__ < beta_st_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_st" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t pred_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "y_out";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_bn_f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pred_f";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}  // namespace

typedef model_neg_binomial_namespace::model_neg_binomial stan_model;


#endif
